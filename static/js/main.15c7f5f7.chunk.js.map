{"version":3,"sources":["components/button/Button.module.css","assets/wowy.mp3","assets/no_one.mp3","helpers/helpers.ts","components/button/Button.tsx","components/Timer.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","button","__webpack_require__","p","pad","minutes","Button","_ref","children","onClick","react_default","a","createElement","className","styles","DEFAULTS","IDLE_TIMEOUT","TIMER","INTERVAL","Timer","state","seconds","started","finished","timer","resetTimeout","intervalSound","endSound","stopTimer","clearInterval","_this","startTimer","setState","setInterval","countdown","resetTimer","resetAfterIdle","setTimeout","play","previousState","getClassName","onChange","event","value","parseInt","target","isNaN","this","Audio","require","_this$state","type","concat","Math","floor","secondsToReadableTime","button_Button","Component","App","screen","Fragment","getScreen","React","components_Timer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.15c7f5f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1fm_s\"};","module.exports = __webpack_public_path__ + \"static/media/wowy.94c8267f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/no_one.b72779cc.mp3\";","export const pad = (minutes: number): string | number => {\n  return minutes < 10 ? \"0\" + minutes : minutes;\n};\n\nexport const secondsToReadableTime = (seconds: number): string => {\n  return `${pad(Math.floor(seconds / 60))} : ${pad(Math.floor(seconds % 60))}`;\n};\n\nexport const saveNumberOfSuccessfulTimers = (): void => {\n  const key: string = \"numberOfTimers\";\n  let successfulTimers: string | null = localStorage.getItem(key);\n  if (successfulTimers) {\n    successfulTimers = (parseInt(successfulTimers, 10) + 1).toString();\n    localStorage.setItem(key, successfulTimers);\n  }\n};\n\nexport const getNumberOfSuccessfulTimers = (): number => {\n  const key: string = \"numberOfTimers\";\n  const numberOfTimers = localStorage.getItem(key);\n  return numberOfTimers ? parseInt(numberOfTimers, 10) : 0;\n};\n","import React, { SFC, ReactNode } from \"react\";\nimport styles from \"./Button.module.css\";\n\ninterface IButtonProps {\n  children: ReactNode;\n  onClick: any;\n}\n\nconst Button: SFC<IButtonProps> = ({ children, onClick }): JSX.Element => {\n  return (\n    <button onClick={onClick} className={styles.button}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport { secondsToReadableTime } from \"../helpers/helpers\";\nimport Button from \"./button/Button\";\n\nconst DEFAULTS = {\n  IDLE_TIMEOUT: 5000,\n  TIMER: 180,\n  INTERVAL: 1000\n};\n\nexport interface IAppState {\n  seconds: number;\n  started: boolean;\n  finished: boolean;\n}\n\ninterface IAppProps {}\n\nclass Timer extends Component<IAppProps, IAppState> {\n  state: IAppState = {\n    seconds: DEFAULTS.TIMER,\n    started: false,\n    finished: false\n  };\n\n  timer: any;\n  resetTimeout: any;\n  intervalSound: any;\n  endSound: any;\n\n  componentDidMount() {\n    this.intervalSound = new Audio(require(\"../assets/wowy.mp3\"));\n    this.endSound = new Audio(require(\"../assets/no_one.mp3\"));\n  }\n\n  componentWillUnmount() {\n    this.stopTimer();\n  }\n\n  private stopTimer = (): void => {\n    clearInterval(this.timer);\n  };\n\n  private startTimer = (): void => {\n    if (!this.state.started) {\n      this.setState({ started: true }, () => {\n        this.timer = setInterval(this.countdown, DEFAULTS.INTERVAL);\n      });\n    }\n  };\n\n  private resetTimer = (): void => {\n    this.stopTimer();\n    this.setState({ seconds: DEFAULTS.TIMER, started: false, finished: false });\n  };\n\n  private resetAfterIdle = (): void => {\n    this.resetTimeout = setTimeout(this.resetTimer, DEFAULTS.IDLE_TIMEOUT);\n    this.setState({ started: false, finished: false });\n  };\n\n  private countdown = (): void => {\n    const { seconds } = this.state;\n    if (seconds > 0) {\n      if (!(seconds % 60)) {\n        this.intervalSound.play();\n      }\n      this.setState(previousState => ({ seconds: previousState.seconds - 1 }));\n    } else {\n      this.stopTimer();\n      this.endSound.play();\n      this.resetAfterIdle();\n      this.setState({ started: false, finished: true });\n    }\n  };\n\n  private getClassName = (finished: boolean, started: boolean): string => {\n    return finished && !started ? \"container gradient\" : \"container\";\n  };\n\n  private onChange = (event: any) => {\n    const value = parseInt(event.target.value, 10)\n    this.setState({ seconds: isNaN(value) ? 0 : value })\n  }\n\n  render() {\n    const { finished, seconds, started } = this.state;\n    return (\n      <div className={this.getClassName(finished, started)}>\n        { !started && <input type=\"text\" value={ seconds } onChange={this.onChange} className=\"input\"/>}\n        <h1>{secondsToReadableTime(seconds)}</h1>\n        <div className=\"buttons-container\">\n          <Button onClick={this.startTimer}>Start</Button>\n          <Button onClick={this.stopTimer}>Stop</Button>\n          <Button onClick={this.resetTimer}>Reset</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport Timer from \"./Timer\";\n\ninterface IAppState {\n  screen: string;\n}\n\ninterface IAppProps {}\n\nexport default class App extends React.Component<IAppProps, IAppState> {\n  state = {\n    screen: \"timer\"\n  };\n\n  private static getScreen = (screen: string): JSX.Element => {\n    switch (screen) {\n      case \"timer\":\n        return <Timer />;\n      default:\n        return <Timer />;\n    }\n  };\n\n  /*   private changeScreen = (screen: string): void => {\n    this.setState({ screen });\n  }; */\n\n  render() {\n    return <React.Fragment>{App.getScreen(this.state.screen)}</React.Fragment>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}